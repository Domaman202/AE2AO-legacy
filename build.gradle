buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        gradlePluginPortal()
        maven { url 'http://dvs1.progwml6.com/files/maven' }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = mod_version
group = mod_group
archivesBaseName = mod_id

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: "${mappings_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'DEBUG'
            property 'forge.logging.console.level', 'debug'
            if (shouldCheckEnv()) {
                environment 'MOD_CLASSES', getEnv()
            }
            mods {
                gti {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'DEBUG'
            property 'forge.logging.console.level', 'debug'
            if (shouldCheckEnv()) {
                environment 'MOD_CLASSES', getEnv()
            }
            arg "-nogui"
            mods {
                gti {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'DEBUG'
            if (shouldCheckEnv()) {
                environment 'MOD_CLASSES', getEnv()
            }
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'gti', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')
            mods {
                gti {
                    source sourceSets.main
                }
            }
        }
    }
}


repositories {
    maven { url 'http://dvs1.progwml6.com/files/maven' }
    maven { url 'https://jitpack.io' }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation files("./inc/appliedenergistics2-rv6-stable-7.jar", "CodeChickenLib-1.12.2.jar")
    implementation group: 'javassist', name: 'javassist', version: '3.12.1.GA'
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", minecraft_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'mod_id': mod_id, 'mod_name': mod_name, 'version': project.version,
                'mcversion': minecraft_version, 'mod_description': mod_description,
                'mod_author': mod_author
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    from {
        configurations.compile
                .filter { "mixin-0.8.3-SNAPSHOT.jar" == it.name }
                .collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "LICENSE.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }

    manifest {
        attributes "FMLCorePlugin": mod_core_plugin
        attributes "FMLCorePluginContainsFMLMod": "true"
        attributes "ForceLoadAsMod": "true"
        attributes "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
        attributes "TweakOrder": "0"
        attributes "MixinConfigs": mod_mixin_configs.replace('${mod_id}', mod_id)
    }
}

jar.finalizedBy('reobfJar')

def shouldCheckEnv() {
    return findProject(':AntimatterAPI') != null || findProject(':TesseractAPI') != null
}

def isVSTask() {
    return gradle.startParameter.taskNames[0].equals("genVSCodeRuns")
}

def getEnv() {
    boolean vscode = isVSTask()
    String resourcePath = vscode ? 'bin/main' : 'build/resources/main'
    String codePath = vscode ? 'bin/main' : 'build/classes/java/main'
    String s = "gti%%${project.file(resourcePath)}" + getPathSeparator() + "gti%%${project.file(codePath)}"
    if (findProject(':AntimatterAPI') != null) {
        s += getPathSeparator() + "antimatter%%${project(':AntimatterAPI').file(resourcePath)}" + getPathSeparator() + "antimatter%%${project(':AntimatterAPI').file(codePath)}"
    }
    if (findProject(':TesseractAPI') != null) {
        s += getPathSeparator() + "tesseract%%${project(':TesseractAPI').file(resourcePath)}" + getPathSeparator() + "tesseract%%${project(':TesseractAPI').file(codePath)}"
    }
    return s
}
import org.apache.tools.ant.taskdefs.condition.Os
def getPathSeparator() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return ";"
    }
    return ":"
}